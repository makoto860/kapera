2025/10/15(水) 18:00
店舗名：ロイヤルホスト 板橋店
持ち物：筆記用具（履歴書は不要です）
住所：板橋区相生町4-9
TEL：03-3934-8111

面接日時：2025年10月17日 17:00〜17:30
面接会場：魚民 東武練馬北口駅前店
住所：東京都板橋区徳丸2-3-1徳丸スクエア 2階
持ち物：不要

店舗名 ：志村坂下
面接日時 ：10月19日 18：00〜
スギ薬局採用担当

まいばすけっと採用センターでございます。
【日時】2025年10月28日(火) 12時00分
【会場】【板橋区】成増2丁目店　店内会議室(最寄：地下鉄成増駅)
【住所】東京都板橋区成増2-17-11有楽町線他「地下鉄成増駅」より徒歩1分
※開始10分前にはご着席下さい。
＜当日の持ち物＞
 1.写真付き履歴書、 2.筆記用具（ボールペン・シャープペンシル）


--------------------------------------------------------------------------------------------------------
修正
1.
app/controllers/application_controller.rb
def load_all_taxons
  root_taxon = Spree::Taxon.find_by(name: CATEGORIES_ROOT_TAXON_NAME)
  return @taxons = [] unless root_taxon
本課題では"Categories"となるtaxonは必ず存在するのでunless不要です。テストが通らないがゆえの修正であればテストデータ設計を見直してください

"Categories"となるtaxonは必ず存在するようにして、存在しないなら例外を出す実装にすればいいと考え
root_taxon = Spree::Taxon.find_by!(name: CATEGORIES_ROOT_TAXON_NAME)記述変更。
def load_all_taxons
  # "Categories"が存在しない場合は例外を出す。
  root_taxon = Spree::Taxon.find_by!(name: CATEGORIES_ROOT_TAXON_NAME)
  allowed_names = ApplicationHelper::TAXON_IMAGE_MAP.keys
  @taxons = root_taxon.children.where(name: allowed_names)
end



2.
def load_all_taxons
  # "Categories"が存在しない場合は例外を出す。
  root_taxon = Spree::Taxon.find_by!(name: CATEGORIES_ROOT_TAXON_NAME)
  allowed_names = ApplicationHelper::TAXON_IMAGE_MAP.keys
  @taxons = root_taxon.children.where(name: allowed_names)
end
データ取得に使用するのであればApplicationHelperではなくこのコントローラに定義し、それをApplicationControllerで参照したいというコメントをもらいました。

ヘルパーはビュー専用の補助ロジックなので、データ取得・ロジック処理には不適切という意図と考えました。



エラー


調べたこと



原因

試したこと


わからないこと


原因


--------------------------------------------------------------------------------------------------------
考えたこと
意図が--のでこれにした
複数パターン
？

1
なぜこれにしたか
2
自分の理解を言語化して伝える
「こういう意図だと理解しています」と先に自分の解釈を伝える。
3
相手の言葉を「言い換えて確認」する
相手の説明をそのままうのみにせず、「こういうことですか？」と返す。

代替案（選択肢）を添えて提案する



github上のコメントに書く

提出用
https://github.com/potepancamp/makoto860/pull/2
https://makoto860-161287c839b7.herokuapp.com/categories/3
--------------------------------------------------------------------------------------------------------
保管用
# system/products_spec.rb
require 'rails_helper'

RSpec.describe "商品ページ", type: :system do
  let(:root) { create(:taxon, parent: nil) }
  let(:other_taxon) { create(:taxon, parent: root) }
  let(:taxon) { create(:taxon, name: '子カテゴリー', parent: other_taxon) }
  let!(:product) { create(:product, taxons: [taxon]) }
  let(:image) { create(:image) }

  before do
    product.images << image
    visit product_path(product.id)
  end

  describe "Container ProductsContainerクラスのテスト" do
    it "プロダクト名が表示されること" do
      within('.ProductDetail__name') do
        expect(page).to have_content(product.name)
      end
    end
  end

  describe "breadcrumbのテスト" do
    it "パンくずで子カテゴリークリックで子カテゴリ一覧へ遷移すること" do
      within('.Breadcrumb') do
        click_on taxon.name
        expect(current_path).to eq category_path(taxon.id)
      end
    end

    it "パンくずでother_taxonリンクが表示されること" do
      within('.Breadcrumb') do
        expect(page).to have_link(other_taxon.name)
      end
    end

    it "パンくずで子カテゴリーリンクが表示されること" do
      within('.Breadcrumb') do
        expect(page).to have_link(taxon.name)
      end
    end

    it "パンくずでプロダクト名が表示されること" do
      within('.Breadcrumb') do
        expect(page).to have_content(product.name)
      end
    end
  end
end



# system/categories_spec.rb
require 'rails_helper'

RSpec.describe "カテゴリーページ", type: :system do
  let(:root) { create(:taxon, name: 'Categories', parent: nil) }
  let(:other_taxon) { create(:taxon, name: '別カテゴリー', parent: root) }
  let(:taxon) { create(:taxon, parent: other_taxon) }
  let!(:product) { create(:product, price: 1, taxons: [taxon]) }
  let!(:other_product) { create(:product, price: 2, taxons: [other_taxon]) }

  describe "breadcrumbのテスト" do
    before do
      visit category_path(other_taxon.id)
    end

    it "パンくずリストにホームが表示されており、クリックでトップに遷移できること" do
      within('.Breadcrumb') do
        click_on 'ホーム'
        expect(current_path).to eq root_path
      end
    end

    it 'パンくずリストに別カテゴリーの商品名が表示されないこと' do
      within('.Breadcrumb') do
        expect(page).not_to have_content(product.name)
      end
    end

    it 'パンくずリストに別カテゴリーリンクが表示されること' do
      within('.Breadcrumb') do
        expect(page).to have_link(other_taxon.name)
      end
    end

    it 'パンくずリストにtaxonリンクが表示されないこと' do
      within('.Breadcrumb') do
        expect(page).not_to have_link(taxon.name)
      end
    end

    it "パンくずリストに別カテゴリーリンクが表示されること" do
      visit category_path(taxon.id)
      within('.Breadcrumb') do
        expect(page).to have_link(other_taxon.name)
      end
    end

    it "パンくずリストにtaxonリンクが表示されること" do
      visit category_path(taxon.id)
      within('.Breadcrumb') do
        expect(page).to have_link(taxon.name)
      end
    end
  end

  describe "NavigationMenuListクラスのテスト" do
    before do
      visit category_path(other_taxon.id)
    end

    it "ヘッダーに最上位カテゴリ直下のカテゴリーが表示されること", js: true do
      within(".NavigationMenuList") do
        expect(page).to have_content other_taxon.name
      end
    end

    it "ヘッダーに最上位カテゴリ直下ではないカテゴリーが表示されないこと" do
      within(".NavigationMenuList") do
        expect(page).not_to have_content taxon.name
      end
    end
  end

  describe "CategoryProducts__listクラスのテスト" do
    before do
      visit category_path(other_taxon.id)
    end

    it "別カテゴリーの商品価格が表示されないこと" do
      visit category_path(taxon.id)
      within(".CategoryProducts__list") do
        expect(page).not_to have_content other_product.display_price
      end
    end

    it "別カテゴリーの商品名が表示されないこと" do
      visit category_path(taxon.id)
      within(".CategoryProducts__list") do
        expect(page).not_to have_content other_product.name
      end
    end

    it "商品名が表示されること" do
      visit category_path(taxon.id)
      within(".CategoryProducts__list") do
        expect(page).to have_content(product.name)
      end
    end

    it '別カテゴリーの商品名が表示されること' do
      within('.CategoryProducts__list') do
        expect(page).to have_content(other_product.name)
      end
    end

    it 'taxon名が表示されないこと' do
      within('.CategoriesTitle') do
        expect(page).not_to have_content(taxon.name)
      end
    end

    it '別カテゴリーが表示されないこと' do
      visit category_path(taxon.id)
      within('.CategoriesTitle') do
        expect(page).not_to have_content(other_taxon.name)
      end
    end

    it 'taxon名が表示されること' do
      visit category_path(taxon.id)
      within('.CategoriesTitle') do
        expect(page).to have_content(taxon.name)
      end
    end
  end
end



# requets/products_spec.rb
require 'rails_helper'

RSpec.describe "Products", type: :request do
  describe "breadcrumbのテスト" do
    let(:root_taxon) { create(:taxon, name: 'root', parent: nil) }
    let(:taxon) { create(:taxon, parent: root_taxon) }
    let(:different_category) { create(:taxon, name: "diffrent", parent: taxon) }
    let(:ancestor_category) { create(:taxon, parent: different_category) }
    let(:product) { create(:product, taxons: [taxon]) }

    before { get product_path(product.id) }


    it "パンくずで最上位カテゴリが含まないこと" do
      expect(response.body).not_to include root_taxon.name
    end

    it "パンくずで紐づいていない別カテゴリが含まないこと" do
      expect(response.body).not_to include different_category.name
    end

    it "パンくずで祖先カテゴリが含まれること" do
      expect(response.body).to include ancestor_category.name
    end
  end

  describe "GET /products/:id" do
    let(:taxon) { create(:taxon) }
    let!(:product) { create(:product, taxons: [taxon]) }

    before { get product_path(product.id) }

    it '正常に商品名が含まれること' do
      expect(response.body).to include product.name
    end

    it '商品詳細ページが含まれること' do
      expect(response).to have_http_status(:ok)
    end

    it '正常に価格が含まれること' do
      expect(response.body).to include product.display_price.to_s
    end
  end
end



# spec/repuests/categories_spec.rb
require 'rails_helper'

RSpec.describe "リクエスト/カテゴリースペック, Categories/show/:id", type: :request do
  let(:root_taxon) { create(:taxon, name: 'root', parent: nil) }
  let(:other_parent_taxon) { create(:taxon) }
  let(:taxon) { create(:taxon, name: '子カテゴリ', parent: other_parent_taxon) }
  let!(:other_product) { create(:product, name: '別カテゴリーの商品名', taxons: [other_parent_taxon]) }

  context "別カテゴリーページのとき" do
    before do
      get category_path(other_parent_taxon.id)
    end

    it '別カテゴリーの商品名が含まれること' do
      expect(response.body).to include other_product.name
    end

    it '子カテゴリーが含まれないこと' do
      expect(response.body).not_to include(taxon.name)
    end

    it '別カテゴリーが含まれること' do
      expect(response.body).to include(other_parent_taxon.name)
    end
  end

  context "子カテゴリーページのとき" do
    before do
      get category_path(taxon.id)
    end

    it "別カテゴリーの商品名が含まれないこと" do
      expect(response.body).not_to include other_product.name
    end

    it '別カテゴリーが含まれないこと' do
      expect(response.body).not_to include(other_parent_taxon.name)
    end

    it '子カテゴリーが含まれること' do
      expect(response.body).to include(taxon.name)
    end
  end
end



アプリケーションヘルパー
module ApplicationHelper
  BASE_TITLE = "BIGBAG Store".freeze
  TAXON_IMAGE_MAP = {
    'Clothing' => 'cloth',
    'Caps' => 'cap',
    'Bags' => 'bag',
    'Mugs' => 'tableware',
  }.freeze
  def full_title(page_title)
    if page_title.blank?
      BASE_TITLE
    else
      "#{page_title} - #{BASE_TITLE}"
    end
  end

  def image_tag_taxon(taxon)
    image_name = image_name_for_taxon(taxon)
    return "" if image_name.nil?
    image_tag("home/category/#{image_name}.jpg", { alt: taxon.name })
  end

  private

  def image_name_for_taxon(taxon)
    TAXON_IMAGE_MAP[taxon.name]
  end
end



デコレーター
#class ProductDecorator < Draper::Decorator
#  delegate_all

#  def image_url(style: :product)
#    images.first&.attachment&.url(style)
#  end

#  def image_tag_html(style: :product)
#    return '' unless has_image?

#    h.image_tag(
#      image_url(style: style),
#      class: 'CategoryProduct__image',
#      alt: name
#    )
#  end

#  private

#  def has_image?
#    images.any?
#  end
#end



カテゴリーコントローラー
class CategoriesController < ApplicationController
  def show
    @taxon = Spree::Taxon.find(params[:id])
    # @products = @taxon.all_products.includes(:variant_images, master: :default_price)
    # master variant に画像がついている商品だけに絞る
     @products = @taxon.all_products.joins(master: :images).includes(:variant_images, master: [:default_price, :images]).distinct
    #@products = @taxon.all_products.joins(master: :images).includes(:variant_images, master: :default_price).distinct
    @categories = @taxon.self_and_ancestors.where.not(parent_id: nil)
  end
end


class CategoriesController < ApplicationController
  def show
    @taxon = Spree::Taxon.find(params[:id])
    @products = @taxon.all_products.includes(:variant_images, master: :default_price).map(&:decorate)
    @categories = @taxon.self_and_ancestors.where.not(parent_id: nil)
  end
end



rails_helper.rb
if ENV["SELENIUM_DRIVER_URL"].present?
    chrome_binary_path =
      case RbConfig::CONFIG['host_os']
      when /darwin/
        '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
      when /linux/
        '/usr/bin/google-chrome'
      else
        nil
      end

    Capybara.register_driver :remote_chrome do |app|
      chrome_options = Selenium::WebDriver::Chrome::Options.new
      chrome_options.binary = chrome_binary_path if chrome_binary_path

      chrome_options.add_argument('--headless')
      chrome_options.add_argument('--disable-gpu')
      chrome_options.add_argument('--no-sandbox')
      chrome_options.add_argument('--disable-dev-shm-usage')
      chrome_options.add_argument('--window-size=1400,1400')

      Capybara::Selenium::Driver.new(
        app,
        browser: :remote,
        url: ENV["SELENIUM_DRIVER_URL"],
        capabilities: chrome_options
      )
    end

    Capybara.javascript_driver = :remote_chrome
  else
    # ローカル用に webdrivers を使った headless chrome を設定（必要なら）
    require 'webdrivers' # 自動で chromedriver をダウンロード

    Capybara.javascript_driver = :selenium_chrome_headless
  end

  config.include FactoryBot::Syntax::Methods
end



<p>products/show.html.erb</p>
  <div class="carousel-inner">
    <%= image_tag @product.images.first.attachment(:product), class: 'ProductSlider__image' %>



<p>products/_product.html.erb</p>
<%= image_tag product.image_url, class: 'CategoryProduct__image' %>
<%= image_tag product.images.first.attachment(:product), class: 'CategoryProduct__image' %>

application_controller.rb
def load_all_taxons
  @taxons = Spree::Taxon.find_by(name: "Categories").children
end

application_controller.rb
def load_all_taxons
  @taxons = Spree::Taxon.find_by(name: "Categories", parent_id: nil)&.children || []
end

def load_all_taxons
  taxon = Spree::Taxon.joins(:taxonomy).find_by(name: "Categories", spree_taxonomies: { name: "Categories" })
  @taxons = taxon&.children || []
end

def load_all_taxons
  taxonomy = Spree::Taxonomy.find_by(name: "Categories")
  @taxons = taxonomy&.root&.children || []
end

viewsで
<ul>
<% @taxons.each do |taxon| %>



products_controller.rb
def show
  @product = Spree::Product.find(params[:id])
  @taxon = @product.taxons.first
  @categories = @taxon.self_and_ancestors.where.not(parent_id: nil)
end

class ProductsController < ApplicationController
  def show
    @product = Spree::Product.joins(variants_including_master: :images).where(id: params[:id]).first
    @product = Spree::Product.joins(variants_including_master: :images).find(params[:id])

    @taxon = @product.taxons.first
    @categories = @taxon.self_and_ancestors.where.not(parent_id: nil)
  end
end
